{"version":3,"sources":["util/sound.ts","components/curve.tsx","components/toggle-button.tsx","components/clipper.tsx","settings.ts","components/droparea.tsx","components/select-file.tsx","components/app.tsx","hooks/useDraggingOver.ts","index.tsx"],"names":["rms","pipe","map","x","mean","Math","sqrt","processChannel","samples","channelData","chunk","ceil","length","loadFileAsArrayBuffer","file","Promise","resolve","reject","reader","FileReader","readAsArrayBuffer","onload","e","result","onerror","Error","getChannels","a","channels","audioContext","window","webkitAudioContext","AudioContext","buffer","decodeAudioData","audioData","i","numberOfChannels","push","Array","from","getChannelData","getBaseline","_","loadAudioData","processedChannels","width","margin","innerWidth","innerHeight","xScale","scaleLinear","domain","numberOfSamples","range","yScale","timeScale","shape","area","y0","y1","d","curve","curveBasis","Curve","currentTime","duration","onSelect","useState","data","setData","pathsRef","useRef","useEffect","dom","extent","flat","select","current","selectAll","join","transition","attr","then","playheadRef","playheadScale","datum","brushRef","brush","brushX","on","isArray","selection","call","height","viewBox","className","transform","ref","ToggleButton","status","onContent","offContent","onChange","onClick","classNames","Clipper","isPlaying","setPlaying","setDuration","startTime","setStartTime","endTime","setEndTime","setCurrentTime","loop","setLoop","updateMetadata","audio","audioRef","onloadedmetadata","onplay","onpause","playPause","useCallback","pause","play","animationFrame","tick","requestAnimationFrame","cancelAnimationFrame","src","URL","createObjectURL","addEventListener","revokeUrl","revokeObjectURL","removeEventListener","controls","dropzone","accept","multiple","DropArea","children","onDrop","isHidden","useDropzone","getRootProps","getInputProps","isDragActive","isDragReject","SelectFile","dropz","noClick","open","App","setFile","isDraggingOver","setDraggingOver","dragCount","handleDragOver","preventDefault","handleDragEnter","update","handleDragLeave","handleDrop","useDraggingOver","acceptedFiles","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78d91041.chunk.js","sourcesContent":["import * as _ from \"lodash/fp\";\nimport { chunk, map, mean, pipe } from \"lodash/fp\";\n\ninterface Window {\n  webkitAudioContext?: typeof AudioContext;\n}\ndeclare const window: Window;\n\nexport const rms = pipe(\n  map((x: number) => x * x),\n  mean,\n  Math.sqrt,\n);\n\nexport const processChannel = (samples: number) => (\n  channelData: number[],\n): number[] =>\n  pipe(chunk(Math.ceil(channelData.length / samples)), map(rms))(channelData);\n\nexport const loadFileAsArrayBuffer = (file: File): Promise<ArrayBuffer> =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsArrayBuffer(file);\n    reader.onload = (e) => resolve(reader.result as ArrayBuffer);\n    reader.onerror = (e) => reject(new Error(\"Couldn't read file.\"));\n  });\n\nexport const getChannels = async (file: File): Promise<number[][]> => {\n  const channels: number[][] = [];\n  const audioContext = window.webkitAudioContext\n    ? new window.webkitAudioContext()\n    : new AudioContext();\n  const buffer = await loadFileAsArrayBuffer(file);\n  const audioData = await audioContext.decodeAudioData(buffer);\n  for (let i = 0; i < audioData.numberOfChannels; i++) {\n    channels.push(Array.from(audioData.getChannelData(i)));\n  }\n  return channels;\n};\n\n// export const getBaseline = (channels: number[][]) => unzip(channels)\nconst getBaseline = _.pipe(_.unzip, _.map(_.min), _.map(_.toNumber));\n\nexport const loadAudioData = async (\n  file: File,\n  samples: number,\n): Promise<number[][]> => {\n  const audioData = await getChannels(file);\n  const processedChannels = audioData.map(processChannel(samples));\n\n  return processedChannels.length === 1\n    ? processedChannels\n    : [...processedChannels, getBaseline(processedChannels)];\n};\n","import { area, brushX, curveBasis, extent, scaleLinear, select } from \"d3\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { loadAudioData } from \"../util/sound\";\n\n/**\n * @todo send the audio processing to a worker\n */\n\nconst width = 1200;\nconst height = 120;\nconst margin = { top: 0, right: 0, bottom: 0, left: 0 };\nconst innerWidth = width - margin.left - margin.right;\nconst innerHeight = height - margin.top - margin.bottom;\nconst numberOfSamples = width / 5;\n\n// d3 configs\nconst xScale = scaleLinear()\n  .domain([0, numberOfSamples - 1])\n  .range([0, innerWidth]);\nconst yScale = scaleLinear().domain([0, 10]).range([innerHeight, 0]);\nconst timeScale = scaleLinear().domain([0, innerWidth]).range([0, 1]);\nconst shape = area<number>()\n  .x((_, i) => xScale(i))\n  .y0(innerHeight)\n  .y1((d) => yScale(d))\n  .curve(curveBasis);\n\ntype CurveProps = {\n  file: File;\n  currentTime: number;\n  duration: number;\n  onSelect?(range: [start: number, end: number] | null): void;\n};\nexport default function Curve({\n  file,\n  currentTime,\n  duration,\n  onSelect,\n}: CurveProps) {\n  const [data, setData] = useState<number[][]>([]);\n  const pathsRef = useRef<SVGGElement>(null);\n\n  // update the graph when de data changes\n  useEffect(() => {\n    const dom = extent(data.flat(2)) as [number, number];\n    yScale.domain(dom);\n\n    select(pathsRef.current!)\n      .selectAll(\"path\")\n      .data(data)\n      .join(\"path\")\n      .transition()\n      .attr(\"d\", shape);\n  }, [data]);\n\n  // update data when file changes\n  useEffect(() => {\n    loadAudioData(file, numberOfSamples).then(setData);\n  }, [file]);\n\n  // playhead\n  const playheadRef = useRef<SVGLineElement>(null);\n  const playheadScale = scaleLinear()\n    .domain([0, duration])\n    .range([1, innerWidth - 1]);\n  useEffect(() => {\n    select(playheadRef.current!)\n      .datum(currentTime)\n      .attr(\"x1\", playheadScale)\n      .attr(\"x2\", playheadScale)\n      .attr(\"y1\", 0)\n      .attr(\"y2\", innerHeight);\n  }, [currentTime, duration, playheadScale]);\n\n  // brush\n  const brushRef = useRef<SVGGElement>(null);\n  useEffect(() => {\n    const brush = brushX().extent([\n      [0, 0],\n      [innerWidth, innerHeight],\n    ]);\n    brush.on(\"start brush end\", (e) => {\n      if (!onSelect) return;\n      if (Array.isArray(e.selection)) {\n        onSelect(e.selection.map(timeScale));\n      } else {\n        onSelect(null);\n      }\n    });\n    select(brushRef.current!).call(brush);\n  }, [onSelect]);\n  // ---------------------------\n\n  return (\n    <svg\n      width={width}\n      height={height}\n      viewBox={`0 0 ${width} ${height}`}\n      className=\"curve\"\n    >\n      <g transform={`translate(${margin.left}, ${margin.top})`}>\n        <g ref={pathsRef} className=\"curve__paths\" />\n        <line ref={playheadRef} className=\"curve__playhead\" />\n        <g ref={brushRef} />\n      </g>\n    </svg>\n  );\n}\n","import classNames from \"classnames\";\nimport React from \"react\";\n\ntype ToggleButtonProps = {\n  status: boolean;\n  onContent: React.ReactNode;\n  offContent: React.ReactNode;\n  onChange?(status: boolean): void;\n};\nexport default function ToggleButton({\n  status,\n  onContent,\n  offContent,\n  onChange,\n}: ToggleButtonProps) {\n  const handleClick = () => {\n    if (onChange) onChange(!status);\n  };\n\n  return (\n    <button\n      onClick={handleClick}\n      className={classNames(\"btn--toggle\", status ? \"btn--on\" : \"btn--off\")}\n    >\n      {status ? onContent : offContent}\n    </button>\n  );\n}\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { IoIosInfinite, IoIosPlay } from \"react-icons/io\";\nimport Curve from \"./curve\";\nimport ToggleButton from \"./toggle-button\";\n\ntype ClipperProps = {\n  file: File;\n};\nexport default function Clipper({ file }: ClipperProps) {\n  const [isPlaying, setPlaying] = useState(false);\n  const [duration, setDuration] = useState(0);\n  const [startTime, setStartTime] = useState(0);\n  const [endTime, setEndTime] = useState(0);\n  const [currentTime, setCurrentTime] = useState(startTime);\n  const [loop, setLoop] = useState(false);\n\n  const updateMetadata = (e) => {\n    const audio = audioRef.current!;\n    setDuration(audio.duration);\n    setStartTime(0);\n    audio.currentTime = startTime;\n  };\n\n  const audioRef = useRef<HTMLAudioElement>(null);\n  useEffect(() => {\n    audioRef.current!.onloadedmetadata = updateMetadata;\n    audioRef.current!.onplay = () => setPlaying(true);\n    audioRef.current!.onpause = () => setPlaying(false);\n  });\n\n  const playPause = useCallback(() => {\n    const audio = audioRef.current!;\n    if (isPlaying) {\n      audio.pause();\n    } else {\n      audio.play();\n    }\n  }, [isPlaying]);\n\n  // update currentTime\n  useEffect(() => {\n    const audio = audioRef.current!;\n    let animationFrame = 0;\n    const tick = () => {\n      setCurrentTime(audio.currentTime);\n      animationFrame = requestAnimationFrame(tick);\n    };\n    tick();\n    return () => {\n      if (animationFrame) cancelAnimationFrame(animationFrame);\n    };\n  }, []);\n\n  // go back to start time after playing\n  useEffect(() => {\n    const audio = audioRef.current!;\n    if (currentTime >= endTime) {\n      audio.currentTime = startTime;\n      if (!loop) {\n        audio.pause();\n      }\n    }\n  }, [currentTime, endTime, loop, startTime]);\n\n  // load dropped file into the audio element\n  useEffect(() => {\n    const audio = audioRef.current!;\n    audio.src = URL.createObjectURL(file);\n    const revokeUrl = () => {\n      URL.revokeObjectURL(audio.src);\n      audio.removeEventListener(\"load\", revokeUrl);\n    };\n    audio.addEventListener(\"load\", revokeUrl);\n  }, [file]);\n\n  // sync current time with start time\n  useEffect(() => {\n    const audio = audioRef.current!;\n    audio.currentTime = startTime;\n  }, [startTime]);\n\n  const handleSelection = (range: [start: number, end: number] | null) => {\n    if (!range) {\n      setStartTime(0);\n      setEndTime(duration);\n    } else {\n      setStartTime(range[0] * duration);\n      setEndTime(range[1] * duration);\n    }\n  };\n\n  return (\n    <div className=\"clipper\">\n      <div className=\"clipper__view\">\n        <Curve\n          file={file}\n          currentTime={currentTime}\n          duration={duration}\n          onSelect={handleSelection}\n        />\n        <audio ref={audioRef} controls />\n      </div>\n      <div className=\"clipper__controls\">\n        <ToggleButton\n          status={isPlaying}\n          onContent={<IoIosPlay />}\n          offContent={<IoIosPlay />}\n          onChange={playPause}\n        />{\" \"}\n        <ToggleButton\n          status={loop}\n          onContent={<IoIosInfinite />}\n          offContent={<IoIosInfinite />}\n          onChange={(loop) => setLoop(loop)}\n        />\n      </div>\n    </div>\n  );\n}\n","export const dropzone = { accept: \"audio/mpeg\", multiple: false };\n","import classNames from \"classnames\";\nimport React from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { dropzone } from \"../settings\";\n\ntype DropAreaProps = {\n  children: React.ReactNode;\n  isHidden: boolean;\n  onDrop: (acceptedFiles: File[]) => void;\n};\nexport default function DropArea({\n  children,\n  onDrop,\n  isHidden,\n}: DropAreaProps) {\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragReject,\n  } = useDropzone({ ...dropzone, onDrop });\n\n  return (\n    <div\n      className={classNames(\n        \"drop-area\",\n        isDragActive && \"drop-area--active\",\n        isDragReject && \"drop-area--rejected\",\n        isHidden && \"drop-area--hidden\",\n      )}\n      {...getRootProps()}\n    >\n      <input {...getInputProps()} />\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { dropzone } from \"../settings\";\n\nexport default function SelectFile({ onDrop }) {\n  const dropz = useDropzone({\n    ...dropzone,\n    noClick: true,\n    onDrop,\n  });\n\n  return (\n    <div>\n      <button onClick={dropz.open}>Selecione um arquivo</button>\n      <input {...dropz.getInputProps()} />\n    </div>\n  );\n}\n","import React, { useCallback, useState } from \"react\";\nimport useDraggingOver from \"../hooks/useDraggingOver\";\nimport Clipper from \"./clipper\";\nimport DropArea from \"./droparea\";\nimport SelectFile from \"./select-file\";\n\nexport default function App() {\n  const [file, setFile] = useState<File | null>(null);\n  const isDraggingOver = useDraggingOver();\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    if (acceptedFiles.length < 1) return;\n    setFile(acceptedFiles[0]);\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <div className=\"layout\">\n        {/* <nav className=\"layout__nav\"></nav> */}\n        <main className=\"layout__content\">\n          <h1>Clipit</h1>\n          {!file && (\n            <div className=\"begin text--center\">\n              <p>\n                Para começar, selecione um arquivo MP3 no seu computador. Você\n                também pode arrastar e soltar o arquivo em qualquer lugar da\n                página.\n              </p>\n              <SelectFile onDrop={onDrop} />\n              <p></p>\n            </div>\n          )}\n          {file && <Clipper file={file} />}\n        </main>\n        {/* <footer className=\"layout__footer\"></footer> */}\n      </div>\n\n      <DropArea isHidden={!isDraggingOver} onDrop={onDrop}>\n        🔥 drop it like it's hot 🔥\n      </DropArea>\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\n\nexport default function useDraggingOver() {\n  const [isDraggingOver, setDraggingOver] = useState(false);\n\n  useEffect(() => {\n    let dragCount = 0;\n\n    function handleDragOver(e: DragEvent) {\n      e.preventDefault();\n    }\n    function handleDragEnter(e: DragEvent) {\n      dragCount++;\n      update();\n    }\n    function handleDragLeave(e: DragEvent) {\n      dragCount--;\n      update();\n    }\n    function handleDrop(e: DragEvent) {\n      dragCount = 0;\n      update();\n    }\n    function update() {\n      setDraggingOver(dragCount > 0);\n    }\n\n    window.addEventListener(\"dragover\", handleDragOver);\n    window.addEventListener(\"dragenter\", handleDragEnter);\n    window.addEventListener(\"dragleave\", handleDragLeave);\n    window.addEventListener(\"drop\", handleDrop);\n\n    return () => {\n      window.removeEventListener(\"dragover\", handleDragOver);\n      window.removeEventListener(\"dragenter\", handleDragEnter);\n      window.removeEventListener(\"dragleave\", handleDragLeave);\n      window.removeEventListener(\"drop\", handleDrop);\n    };\n  }, []);\n\n  return isDraggingOver;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/app\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// import * as serviceWorker from './serviceWorker';\n// serviceWorker.unregister();\n"],"sourceRoot":""}